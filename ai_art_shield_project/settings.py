"""
Django settings for ai_art_shield_project project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# Initialise django-environ
env = environ.Env(
    # Définis les types par défaut et les valeurs par défaut si la variable n'est pas trouvée
    DJANGO_SECRET_KEY=(str, 'your-secret-key-for-dev-fallback'), # Chaîne de caractères
    DJANGO_DEBUG=(bool, False), # Booléen (sera converti de "True"/"False")
    DJANGO_ALLOWED_HOSTS=(list, ['127.0.0.1', 'localhost']), # Liste de chaînes (sera convertie de "host1,host2")
    # Pour la base de données, tu peux aussi les définir ici si tu veux utiliser env.db()
    POSTGRES_DB=(str, 'ai_art_shield_db_dev'),
    POSTGRES_USER=(str, 'myuser_dev'),
    POSTGRES_PASSWORD=(str, 'mypassword_dev'),
    POSTGRES_HOST=(str, 'db'),
    POSTGRES_PORT=(str, '5432'),
)

# Charge les variables d'environnement depuis .env
# Cela doit être fait avant d'accéder aux variables
# Le chemin est important : env.read_env() va chercher .env dans le BASE_DIR par défaut.
env.read_env(os.path.join(BASE_DIR, '.env'))

# --- Variables de configuration de l'application ---

# SECRET_KEY : Essentielle pour la sécurité de Django
SECRET_KEY = env('DJANGO_SECRET_KEY')

# DEBUG : Mode de débogage
DEBUG = env('DJANGO_DEBUG')

# ALLOWED_HOSTS : Hôtes autorisés
ALLOWED_HOSTS = env('DJANGO_ALLOWED_HOSTS')

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'protection_app',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "ai_art_shield_project.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "ai_art_shield_project.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Settings for user-uploaded media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media') # Définit le chemin absolu vers le dossier 'media' à la racine du projet

# Sous-dossiers spécifiques pour les images
# Sous-dossiers spécifiques pour les images
MEDIA_ORIGINAL_DIR = os.path.join(MEDIA_ROOT, 'original')
MEDIA_PROTECTED_DIR = os.path.join(MEDIA_ROOT, 'protected')

os.makedirs(MEDIA_ORIGINAL_DIR, exist_ok=True)
os.makedirs(MEDIA_PROTECTED_DIR, exist_ok=True)

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': env('POSTGRES_DB'), 
        'USER': env('POSTGRES_USER'), 
        'PASSWORD': env('POSTGRES_PASSWORD'), 
        'HOST': env('POSTGRES_HOST'), 
        'PORT': env('POSTGRES_PORT'),
    }
}

# --- DEBUGGING / LOGGING VARIABLES ---
if DEBUG: # N'affiche ces infos que si le mode DEBUG est activé (environnement de dev)
    print("\n--- DEBUGGING ENVIRONMENT VARIABLES (visible only in dev mode) ---")
    print(f"DJANGO_SECRET_KEY: {'*' * len(SECRET_KEY) if SECRET_KEY else 'NOT SET'}") # Ne pas afficher la clé réelle
    print(f"DEBUG: {DEBUG}")
    print(f"ALLOWED_HOSTS: {ALLOWED_HOSTS}")
    print(f"POSTGRES_DB: {env('POSTGRES_DB')}")
    print(f"POSTGRES_USER: {env('POSTGRES_USER')}")
    print(f"POSTGRES_HOST: {env('POSTGRES_HOST')}")
    print(f"POSTGRES_PORT: {env('POSTGRES_PORT')}")
    print("-------------------------------------------------------------------\n")

# Définition des LOGGING
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'protection_app': { # Crée un logger spécifique pour votre application
            'handlers': ['console'],
            'level': 'DEBUG', # Changez à DEBUG pour voir tous les logs de votre app
            'propagate': True,
        },
    },
}